# Описание задачи:
# Программа решает задачу Коши для дифференциального уравнения методом Эйлера и методом Рунге-Кутта 4-го порядка.
# Цель: сравнить численные результаты с точным решением и оценить погрешность.

import math  # Импортируем модуль math для математических операций

# Заданная функция f(t, u) = t + u
def function(t, u):
    return t + u  # Возвращает значение функции f(t, u)

# Точное решение задачи Коши: u*(t) = 2e^t - t - 1
def exact_solution(t):
    return 2 * math.exp(t) - t - 1  # Возвращает точное значение u*(t)

# Метод Эйлера для численного решения задачи Коши
def euler_method(t0, u0, T, tau):
    N = int((T - t0) / tau)  # Вычисляем количество шагов
    t = t0  # Инициализация текущего значения t
    u = u0  # Инициализация текущего значения u
    max_error = 0.0  # Максимальная погрешность, начальное значение

    print("\nМетод Эйлера:")  # Заголовок для метода Эйлера
    print(f"{'t':<8}{'u (Числ.)':<15}{'u* (Точное)':<15}{'|u - u*|':<15}")  # Заголовок таблицы

    for _ in range(N + 1):  # Итерация по всем шагам
        exact = exact_solution(t)  # Вычисляем точное решение
        error = abs(u - exact)  # Погрешность
        max_error = max(max_error, error)  # Обновляем максимальную погрешность

        # Вывод значений для текущего шага
        print(f"{t:<8.4f}{u:<15.8f}{exact:<15.8f}{error:<15.8f}")

        # Основная формула метода Эйлера
        u += tau * function(t, u)  # Вычисляем следующее значение u
        t += tau  # Увеличиваем t на шаг tau

    print(f"Максимальная погрешность (Метод Эйлера) при tau = {tau}: {max_error:.8f}\n")  # Вывод максимальной погрешности

# Метод Рунге-Кутта 4-го порядка (RK4) для численного решения
def runge_kutta_4(t0, u0, T, tau):
    N = int((T - t0) / tau)  # Вычисляем количество шагов
    t = t0  # Инициализация текущего значения t
    u = u0  # Инициализация текущего значения u
    max_error = 0.0  # Максимальная погрешность, начальное значение

    print("\nМетод Рунге-Кутта 4-го порядка:")  # Заголовок для метода Рунге-Кутта
    print(f"{'t':<8}{'u (Числ.)':<15}{'u* (Точное)':<15}{'|u - u*|':<15}")  # Заголовок таблицы

    for _ in range(N + 1):  # Итерация по всем шагам
        exact = exact_solution(t)  # Вычисляем точное решение
        error = abs(u - exact)  # Погрешность
        max_error = max(max_error, error)  # Обновляем максимальную погрешность

        # Вывод значений для текущего шага
        print(f"{t:<8.4f}{u:<15.8f}{exact:<15.8f}{error:<15.8f}")

        # Основные формулы метода Рунге-Кутта 4-го порядка
        k1 = function(t, u)  # Первый коэффициент
        k2 = function(t + tau / 2, u + tau * k1 / 2)  # Второй коэффициент
        k3 = function(t + tau / 2, u + tau * k2 / 2)  # Третий коэффициент
        k4 = function(t + tau, u + tau * k3)  # Четвертый коэффициент
        u += tau * (k1 + 2 * k2 + 2 * k3 + k4) / 6  # Формула Рунге-Кутта
        t += tau  # Увеличиваем t на шаг tau

    print(f"Максимальная погрешность (Метод Рунге-Кутта 4-го порядка) при tau = {tau}: {max_error:.8f}\n")  # Вывод максимальной погрешности

# Основная программа
def main():
    t0 = 1  # Начальное значение t
    T = 2   # Конечное значение t
    u0 = 3.43656366  # Начальное значение u(t0)

    # Список шагов tau
    taus = [0.1, 0.05, 0.025, 0.0125, 0.00625, 0.003125]

    # Вводные данные
    print("Численное решение задачи Коши с использованием методов Эйлера и Рунге-Кутта 4-го порядка")
    print(f"Начальные условия: t0 = {t0}, T = {T}, u0 = {u0}\n")

    # Решение задачи для каждого значения tau
    for tau in taus:
        print(f"\nШаг tau = {tau}")

        # Решение методом Эйлера
        euler_method(t0, u0, T, tau)

        # Решение методом Рунге-Кутта 4-го порядка
        runge_kutta_4(t0, u0, T, tau)

# Запуск основной программы
if __name__ == "__main__":
    main()

# Описание методов:
# 1. Метод Эйлера:
#    - Простая линейная аппроксимация решения.
#    - Формула: u_{n+1} = u_n + tau * f(t_n, u_n)
#    - Быстро выполняется, но менее точен, особенно для больших шагов tau.
#
# 2. Метод Рунге-Кутта 4-го порядка:
#    - Более сложный метод с использованием промежуточных коэффициентов (k1, k2, k3, k4).
#    - Формула: u_{n+1} = u_n + tau * (k1 + 2k2 + 2k3 + k4) / 6
#    - Требует больше вычислений на каждом шаге, но значительно точнее.
#
# 3. Сравнение:
#    - Метод Эйлера подходит для грубых приближений или небольших шагов.
#    - Метод Рунге-Кутта точнее и предпочтителен для сложных задач с высокой точностью.

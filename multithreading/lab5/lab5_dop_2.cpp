#include <mpi.h>
#include <stdio.h>

/*
Программа демонстрирует использование функции MPI_Comm_split для разделения процессов на три группы (по остатку от деления ранга на 3).
1. Процессы делятся на три группы:
   - Группа 0 (rank % 3 == 0)
   - Группа 1 (rank % 3 == 1)
   - Группа 2 (rank % 3 == 2)
2. Для каждой группы создаётся новый коммуникатор, в котором процессы имеют свои локальные ранги.
3. Программа выводит:
   - Глобальный ранг (в MPI_COMM_WORLD).
   - Локальный ранг (в новом коммуникаторе).
   - Цвет (группа, к которой относится процесс).
*/

int main(int argc, char* argv[]) {
    int rank, size, color;
    MPI_Comm NEW_COMM; // Новый коммуникатор для подгруппы

    // Инициализация MPI
    MPI_Init(&argc, &argv);

    // Получаем ранг текущего процесса в MPI_COMM_WORLD
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    // Получаем общее количество процессов
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Определяем цвет (группу) на основе rank % 3
    // Ранги делятся на три группы: 0, 1, 2
    color = rank % 3;

    // Разделяем MPI_COMM_WORLD на подгруппы по цвету
    // - color определяет, к какой группе относится процесс.
    // - rank задаёт порядок процессов в подгруппе.
    // - NEW_COMM — новый коммуникатор, в котором находятся процессы с одинаковым цветом.
    MPI_Comm_split(MPI_COMM_WORLD, color, rank, &NEW_COMM);

    // Получаем локальный ранг процесса в новом коммуникаторе
    int new_rank, new_size;
    MPI_Comm_rank(NEW_COMM, &new_rank);

    // Получаем размер нового коммуникатора (количество процессов в группе)
    MPI_Comm_size(NEW_COMM, &new_size);

    // Вывод информации о процессе
    // - Global rank — ранг процесса в MPI_COMM_WORLD
    // - New rank — локальный ранг в новом коммуникаторе
    // - Color — группа, к которой относится процесс
    printf("Global rank: %d, New rank: %d, Color: %d\n", rank, new_rank, color);

    // Освобождаем ресурсы, связанные с новым коммуникатором
    MPI_Comm_free(&NEW_COMM);

    // Завершаем работу MPI
    MPI_Finalize();
    return 0;
}

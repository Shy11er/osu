#include <mpi.h>
#include <stdio.h>

/*
Программа демонстрирует использование функции MPI_Comm_split для создания подгрупп (новых коммуникаторов) на основе "цвета".
1. Все процессы разделяются на две группы:
   - Процессы с чётными рангами (`rank % 2 == 0`).
   - Процессы с нечётными рангами (`rank % 2 != 0`).
2. Для каждой группы создаётся новый коммуникатор, в рамках которого процессы имеют свои локальные ранги.
3. Программа выводит:
   - Глобальный ранг (в MPI_COMM_WORLD).
   - Локальный ранг (в новом коммуникаторе).
   - Цвет (идентификатор группы).
*/

int main(int argc, char* argv[]) {
    int rank, size, color;
    MPI_Comm NEW_COMM; // Новый коммуникатор для подгруппы

    // Инициализация MPI
    MPI_Init(&argc, &argv);

    // Получаем глобальный ранг текущего процесса (в MPI_COMM_WORLD)
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    // Получаем общее количество процессов
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Определяем цвет (группу) для каждого процесса
    // Чётные процессы получают цвет 0, нечётные — цвет 1
    color = rank % 2;

    // Разделяем MPI_COMM_WORLD на подгруппы по цвету
    // - color определяет группу, к которой относится процесс.
    // - rank используется для определения порядка в подгруппе.
    // - NEW_COMM — новый коммуникатор для подгруппы.
    MPI_Comm_split(MPI_COMM_WORLD, color, rank, &NEW_COMM);

    // Получаем локальный ранг процесса в новом коммуникаторе
    int new_rank, new_size;
    MPI_Comm_rank(NEW_COMM, &new_rank);

    // Получаем размер нового коммуникатора (количество процессов в группе)
    MPI_Comm_size(NEW_COMM, &new_size);

    // Вывод информации о процессе
    // - Global rank — ранг в глобальном коммуникаторе MPI_COMM_WORLD
    // - New rank — ранг в новом коммуникаторе
    // - Color — идентификатор группы
    printf("Global rank: %d, New rank: %d, Color: %d\n", rank, new_rank, color);

    // Освобождаем ресурсы, связанные с новым коммуникатором
    MPI_Comm_free(&NEW_COMM);

    // Завершаем работу MPI
    MPI_Finalize();
    return 0;
}

#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/*
–ö–∞–∂–¥–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ ùëÅ =8
N=8 –∏ 
size
=
4
size=4 (4 –ø—Ä–æ—Ü–µ—Å—Å–∞), –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–∞–µ—Ç 2 —Å—Ç—Ä–æ–∫–∏.
*/

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
void process_row(int* row, int N, int is_odd) {
    if (is_odd) {
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –Ω–µ—á–µ—Ç–Ω—ã–π, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
        for (int i = 0; i < N / 2; i++) {
            int temp = row[i];
            row[i] = row[N - i - 1];
            row[N - i - 1] = temp;
        }
    } else {
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —á–µ—Ç–Ω—ã–π, —É–¥–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏
        for (int i = 0; i < N; i++) {
            row[i] *= 2;
        }
    }
}

int main(int argc, char** argv) {
    int N = 8; // –†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (8x8)

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã
    if (argc == 2) {
        N = atoi(argv[1]);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    srand(time(NULL)); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    int size, rank, sendcount, recvcount, source;
    int* sendbuf;

    MPI_Init(&argc, &argv); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MPI
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
    MPI_Comm_size(MPI_COMM_WORLD, &size); // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–ª–∏—Ç—Å—è –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–∞ —á–∏—Å–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if (N % size) {
        if (rank == 0) printf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ —á–∏—Å–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n");
        MPI_Finalize();
        return 0;
    }

    // –í—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å —Ä–∞–Ω–≥–æ–º 0)
    sendbuf = new int[N * N];

    if (rank == 0) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã –∏ –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω
        printf("–ò—Å—Ö–æ–¥–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:\n");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                sendbuf[i * N + j] = rand() % 10; // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 9
                printf("%d ", sendbuf[i * N + j]); // –í—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–∞
            }
            printf("\n");
        }
    }

    // –ß–∏—Å–ª–æ —Å—Ç—Ä–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∫–∞–∂–¥—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    int rows_per_proc = N / size;
    // –ë—É—Ñ–µ—Ä –¥–ª—è —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    int* recvbuf = new int[rows_per_proc * N];
    source = 0; // –ü—Ä–æ—Ü–µ—Å—Å-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ä–∞–Ω–≥–æ–º 0)

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
    MPI_Scatter(sendbuf, rows_per_proc * N, MPI_INT, recvbuf, rows_per_proc * N, MPI_INT, source, MPI_COMM_WORLD);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —ç—Ç–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
    for (int i = 0; i < rows_per_proc; i++) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
        process_row(&recvbuf[i * N], N, (rank * rows_per_proc + i) % 2 != 0);
    }

    // –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
    MPI_Gather(recvbuf, rows_per_proc * N, MPI_INT, sendbuf, rows_per_proc * N, MPI_INT, source, MPI_COMM_WORLD);

    if (rank == 0) {
        // –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        printf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:\n");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                printf("%d ", sendbuf[i * N + j]);
            }
            printf("\n");
        }
    }

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
    delete[] sendbuf;
    delete[] recvbuf;
    MPI_Finalize(); // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É MPI
    return 0;
}
